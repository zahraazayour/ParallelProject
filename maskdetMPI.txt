#include <stdio.h>
#include <stdlib.h>
#include <opencv2/opencv.hpp>
#include <mpi.h>

using namespace cv;

int main(int argc, char** argv )
{
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get the rank and size of the MPI communicator
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Load pre-trained classifiers for face and face mask detection
    CascadeClassifier face_cascade, mask_cascade;
    if (!face_cascade.load("haarcascade_frontalface_default.xml") ||
        !mask_cascade.load("haarcascade_mask.xml"))
    {
        printf("Error loading cascade classifiers\n");
        MPI_Finalize();
        return -1;
    }

    // Open default camera on the first process only
    VideoCapture capture;
    if (rank == 0)
    {
        capture.open(0);
        if (!capture.isOpened())
        {
            printf("Error opening camera\n");
            MPI_Finalize();
            return -1;
        }
    }

    // Create a window for displaying the camera feed on the first process only
    if (rank == 0)
    {
        namedWindow("Camera Feed", WINDOW_NORMAL);
    }

    while (true)
    {
        // Read a frame from the camera on the first process only
        Mat frame;
        if (rank == 0)
        {
            capture >> frame;
        }

        // Broadcast the frame to all processes
        MPI_Bcast(frame.data, frame.total() * frame.elemSize(), MPI_BYTE, 0, MPI_COMM_WORLD);

        if (frame.empty())
        {
            printf("No frame captured from camera\n");
            break;
        }

        // Split the frame into equal-sized chunks among the processes
        int chunk_size = frame.rows / size;
        int chunk_start = rank * chunk_size;
        int chunk_end = chunk_start + chunk_size;
        if (rank == size - 1)
        {
            chunk_end = frame.rows;
        }
        Mat chunk = frame.rowRange(chunk_start, chunk_end);

        // Convert to grayscale
        Mat gray;
        cvtColor(chunk, gray, COLOR_BGR2GRAY);

        // Detect faces in the grayscale image
        std::vector<Rect> faces;
        face_cascade.detectMultiScale(gray, faces, 1.3, 5);

        // Draw rectangles around the faces and detect masks
        for (size_t i = 0; i < faces.size(); i++)
        {
            // Get the coordinates of the face
            Rect face_rect = faces[i];
            Point center(face_rect.x + face_rect.width/2, chunk_start + face_rect.y + face_rect.height/2);

            // Detect masks in the face region
            Mat face_region = gray(face_rect);
            std::vector<Rect> masks;
            mask_cascade.detectMultiScale(face_region, masks, 1.3, 5);

            // Draw a rectangle around the face and label it as masked or unmasked
            Scalar color;
            std::string label;
            if (masks.size() > 0)
            {
                color = Scalar(0, 255, 0); // green
                label = "Masked";
            }
            else
            
            {
                color = Scalar(0, 0, 255); // red
                label = "Unmasked";
            }
            rectangle(frame, face_rect, color, 2);
            putText(frame, label, center, FONT_HERSHEY_SIMPLEX, 1, color, 2);
        }

        // Display the camera feed
        imshow("Camera Feed", frame);

        // Press ESC to quit
        if (waitKey(1) == 27)
            break;
    }

    // Release the camera and destroy the window
    capture.release();
    destroyAllWindows();

    return 0;
}

