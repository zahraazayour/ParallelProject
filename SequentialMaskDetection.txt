#include <opencv2/opencv.hpp>
#include <iostream>

using namespace std;
using namespace cv;

int main(int argc, char** argv)
{
    // Load the cascade classifier for face detection
    CascadeClassifier faceCascade;
    faceCascade.load("haarcascade_frontalface_alt.xml");

    // Load the cascade classifier for mask detection
    CascadeClassifier maskCascade;
    maskCascade.load("haarcascade_mask.xml");

    // Open the default camera
    VideoCapture cap(0);

    // Check if the camera is opened successfully
    if (!cap.isOpened())
    {
        cout << "Error opening camera" << endl;
        return -1;
    }

    // Create a window to display the camera output
    namedWindow("Face Mask Detection", WINDOW_NORMAL);

    while (true)
    {
        // Read a frame from the camera
        Mat frame;
        cap.read(frame);

        // Convert the frame to grayscale
        Mat grayFrame;
        cvtColor(frame, grayFrame, COLOR_BGR2GRAY);

        // Detect faces in the frame
        vector<Rect> faces;
        faceCascade.detectMultiScale(grayFrame, faces, 1.1, 3, 0, Size(30, 30));

        // For each face detected, check if a mask is present
        for (size_t i = 0; i < faces.size(); i++)
        {
            // Get the region of interest (ROI) for the face
            Rect faceROI = faces[i];

            // Convert the ROI to grayscale
            Mat grayFace = grayFrame(faceROI);

            // Detect masks in the face ROI
            vector<Rect> masks;
            maskCascade.detectMultiScale(grayFace, masks, 1.1, 3, 0, Size(30, 30));

            // Draw a rectangle around the face
            rectangle(frame, faceROI, Scalar(0, 0, 255), 2);

            // If a mask is not detected, draw a red rectangle around the face
            if (masks.size() == 0)
            {
                rectangle(frame, faceROI, Scalar(0, 0, 255), 2);
            }
            else
            {
                // Draw a green rectangle around the mask
                Rect maskROI = masks[0];
                maskROI.x += faceROI.x;
                maskROI.y += faceROI.y;
                rectangle(frame, maskROI, Scalar(0, 255, 0), 2);
            }
        }

        // Display the frame in the window
        imshow("Face Mask Detection", frame);

        // Press q to quit
        if (waitKey(1) == 'q')
        {
            break;
        }
    }

    // Release the camera and destroy the window
    cap.release();
    destroyAllWindows();

    return 0;
}
